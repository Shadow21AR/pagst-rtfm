#+TITLE: Functions
#+AUTHOR: caubert and jo3-l
Functions are underappreciated. In general, not just in templates. // Rob Pike

Every function having both cases possible for an argument - ID\slash{}name, then this name is handled case insensitive, for example getRole "pagstdb" and getRole "pAgStDb" would have same responses even if server has both of these roles, so using IDs is better.

* Table of Contents :TOC_1:QUOTE:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
#+BEGIN_QUOTE
- [[#channel][Channel]]
- [[#database][Database]]
#+END_QUOTE

* Channel
|-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Function                            | Description                                                                                                                                                                                                                                                                |
|-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~editChannelName channel newName~   | Function edits channel's name. channel can be either ID, "name" or even nil if triggered in that channel name change is intended to happen. ~newName~ has to be of type string. For example  > ~{{editChannelName nil (joinStr "" "PAGST - " (randInt 1000))}}~            |
| ~editChannelTopic channel newTopic~ | Function edits channel's topic\slash{}description. channel can be either ID, "name" or nil if triggered in that channel where name change is intended to happen.  ~newTopic~ has to be of type /string/. For example > ~{{editChannelTopic nil "PAGST is cool"}}~          |
| ~getChannel channel~                | Function returns full channel object of given channel argument which can be either its ID, name or nil for triggering channel, and is of type /*templates.CtxChannel./ For example > ~{{(getChannel nil).Name}}~ returns the name of the channel command was triggered in. |
| ~getChannelOrThread channel~        | Returns type*templates.CtxChannel corresponding to Channel object.                                                                                                                                                                                                         |
| ~getPinCount channel~               | Returns the count of pinned messages in given channel which can be either its ID, name or nil for triggering channel. Can be called 2 times for regular and 4 for premium servers.                                                                                         |
| ~getThread channel~                 | Returns type /*templates.CtxChannel/ corresponding to [[file:templates.org::#channel][channel object]].                                                                                                                                                                                                      |
[[#table-of-contents][back to TOC]]
* Database
|---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| Function                                          | Description                                                                                                                                                                                                                                                                                                 | PAGST      |
|---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| ~dbBottomEntries pattern amount nSkip~            | Returns ~amount~ (max 100)top entries of keys determined by the pattern from the database, sorted by the value in a ascending order.                                                                                                                                                                        |            |
| ~dbCount (userID, key, query)~                    | Returns the count of all database entries which are not expired. [[#dbcount-optional-arguments][Optional arguments]] ~userID~, ~key~ and ~query~ of type /sdict/.                                                                                                                                                                            |            |
| ~dbDel userID ID~                                 | Deletes the specified key for the specified value from the database.                                                                                                                                                                                                                                        |            |
| ~dbDelByID userID ID~                             | Deletes database entry by its ID.                                                                                                                                                                                                                                                                           |            |
| ~dbDelMultiple query amount skip~                 | Deletes ~amount~ (max 100) entries from the database matching the criteria provided. ~query~ should be an /sdict/ with [[#dbDelMultiple-query-options][the following options]]. Function returns the number of rows that got deleted or an error.                                                                                             |            |
| ~dbGetPattern userID pattern amount nSkip~        | Retrieves up to ~amount~ (max 100) entries from the database in ascending order.                                                                                                                                                                                                                            |            |
| ~dbGetPatternReverse userID pattern amount nSkip~ | Retrieves up to ~amount~ (max 100) entries from the database in ascending order.                                                                                                                                                                                                                            |            |
| ~dbDecr userID key decryBy~                       | Decrements the value for specified key for the specified user, if there was no value then it will be set to ~decrBy~. Also returns the entry's current, increased value.                                                                                                                                    | \checkmark |
| ~dbIncr userID key incrBy~                        | Increments the value for specified key for the specified user, if there was no value then it will be set to ~incrBy~. Also returns the entry's current, increased value.                                                                                                                                    |            |
| ~dbRank query userID key~                         | Returns the rank of the entry specified by the user ID and key provided in the set of entries matching the criteria provided. ~query~ should be a sdict with the [[#dbrank-query-options][following options]].                                                                                                                         |            |
| ~dbSet userID key value~                          | Sets the value for the specified key for the specific ~userID~ to the specified ~value~. ~userID~ can be any number of type /int64/. Values are stored either as of type /float64/ (for numbers, oct or hex) or as varying type in bytes (for /slices/, /maps/, /strings/ etc) depending on input argument. |            |
| ~dbSetExpire userID key value ttl~                | Same as ~dbSet~ but with an expiration ~ttl~ which is an int and represents seconds.                                                                                                                                                                                                                        |            |
| ~dbTopEntries pattern amount nSkip~               | Returns amount (max 100) top entries of keys determined by the ~pattern~ from the database, sorted by the value in a descending order                                                                                                                                                                       |            |

** dbCount optional arguments
#+begin_src
Optional arguments: if userID is given, counts entries for that userID;
if key, only those keys are counted; and if query is provided, it should be a sdict with the following options:

 * userID - only counts entries with that user ID, defaults to counting entries with any user ID
 * pattern - only counts entries with names matching the pattern given, defaults to counting entries with any name.
#+end_src
** dbDelMultiple query options
#+begin_src
The query should be an sdict with the following options:
 * userID - only deletes entries with the dbEntry field .UserID provided, defaults to deleting entries with any ID.
 * pattern - only deletes entry keys with a name matching the pattern given.
 * reverse - if true, starts deleting entries with the lowest values first;
   otherwise starts deleting entries with the highest values first. Default is false.
#+end_src
** dbRank query options
#+begin_src
The query specifies the set of entries that should be considered, and should be a sdict with the following options:
 * userID - only includes entries with that user ID, defaults to including entries with any user ID
 * pattern - only includes database's key entries with names matching the pattern given, defaults to counting entries with any name
 * reverse - if true, entries with lower value have higher rank;
   otherwise entries with higher value have higher rank. Default is false.
#+end_src
[[#table-of-contents][back to TOC]]
