#+TITLE: Functions
#+AUTHOR: caubert and jo3-l
Functions are underappreciated. In general, not just in templates. // Rob Pike

Every function having both cases possible for an argument - ID\slash{}name, then this name is handled case insensitive, for example getRole "pagstdb" and getRole "pAgStDb" would have same responses even if server has both of these roles, so using IDs is better.

* Table of Contents :TOC_1:QUOTE:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
#+BEGIN_QUOTE
- [[#channel][Channel]]
- [[#database][Database]]
- [[#execcc][ExecCC]]
- [[#math][Math]]
#+END_QUOTE

* Channel
|-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Function                            | Description                                                                                                                                                                                                                                                                |
|-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~editChannelName~ channel newName   | Function edits channel's name. channel can be either ID, "name" or even nil if triggered in that channel name change is intended to happen. ~newName~ has to be of type string. For example  > ~{{editChannelName nil (joinStr "" "PAGST - " (randInt 1000))}}~            |
| ~editChannelTopic~ channel newTopic | Function edits channel's topic\slash{}description. channel can be either ID, "name" or nil if triggered in that channel where name change is intended to happen.  ~newTopic~ has to be of type /string/. For example > ~{{editChannelTopic nil "PAGST is cool"}}~          |
| ~getChannel~ channel                | Function returns full channel object of given channel argument which can be either its ID, name or nil for triggering channel, and is of type /*templates.CtxChannel./ For example > ~{{(getChannel nil).Name}}~ returns the name of the channel command was triggered in. |
| ~getChannelOrThread~ channel        | Returns type*templates.CtxChannel corresponding to Channel object.                                                                                                                                                                                                         |
| ~getPinCount~ channel               | Returns the count of pinned messages in given channel which can be either its ID, name or nil for triggering channel. Can be called 2 times for regular and 4 for premium servers.                                                                                         |
| ~getThread~ channel                 | Returns type /*templates.CtxChannel/ corresponding to [[file:templates.org::#channel][channel object]].                                                                                                                                                                                                      |
[[#table-of-contents][back to TOC]]
* Database
|---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| Function                                          | Description                                                                                                                                                                                                                                                                                                 | PAGST      |
|---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| ~dbBottomEntries~ pattern amount nSkip            | Returns ~amount~ (max 100)top entries of keys determined by the pattern from the database, sorted by the value in a ascending order.                                                                                                                                                                        |            |
| ~dbCount~ (userID, key, query)                    | Returns the count of all database entries which are not expired. [[#dbcount-optional-arguments][Optional arguments]] ~userID~, ~key~ and ~query~ of type /sdict/.                                                                                                                                                                            |            |
| ~dbDel~ userID ID                                 | Deletes the specified key for the specified value from the database.                                                                                                                                                                                                                                        |            |
| ~dbDelByID~ userID ID                             | Deletes database entry by its ID.                                                                                                                                                                                                                                                                           |            |
| ~dbDelMultiple~ query amount skip                 | Deletes ~amount~ (max 100) entries from the database matching the criteria provided. ~query~ should be an /sdict/ with [[#dbDelMultiple-query-options][the following options]]. Function returns the number of rows that got deleted or an error.                                                                                             |            |
| ~dbGetPattern~ userID pattern amount nSkip        | Retrieves up to ~amount~ (max 100) entries from the database in ascending order.                                                                                                                                                                                                                            |            |
| ~dbGetPatternReverse~ userID pattern amount nSkip | Retrieves up to ~amount~ (max 100) entries from the database in ascending order.                                                                                                                                                                                                                            |            |
| ~dbDecr~ userID key decryBy                       | Decrements the value for specified key for the specified user, if there was no value then it will be set to ~decrBy~. Also returns the entry's current, increased value.                                                                                                                                    | \checkmark |
| ~dbIncr~ userID key incrBy                        | Increments the value for specified key for the specified user, if there was no value then it will be set to ~incrBy~. Also returns the entry's current, increased value.                                                                                                                                    |            |
| ~dbRank~ query userID key                         | Returns the rank of the entry specified by the user ID and key provided in the set of entries matching the criteria provided. ~query~ should be a sdict with the [[#dbrank-query-options][following options]].                                                                                                                         |            |
| ~dbSet~ userID key value                          | Sets the value for the specified key for the specific ~userID~ to the specified ~value~. ~userID~ can be any number of type /int64/. Values are stored either as of type /float64/ (for numbers, oct or hex) or as varying type in bytes (for /slices/, /maps/, /strings/ etc) depending on input argument. |            |
| ~dbSetExpire~ userID key value ttl                | Same as ~dbSet~ but with an expiration ~ttl~ which is an int and represents seconds.                                                                                                                                                                                                                        |            |
| ~dbTopEntries~ pattern amount nSkip               | Returns amount (max 100) top entries of keys determined by the ~pattern~ from the database, sorted by the value in a descending order                                                                                                                                                                       |            |

** dbCount optional arguments
#+begin_src
Optional arguments: if userID is given, counts entries for that userID;
if key, only those keys are counted; and if query is provided, it should be a sdict with the following options:

 * userID - only counts entries with that user ID, defaults to counting entries with any user ID
 * pattern - only counts entries with names matching the pattern given, defaults to counting entries with any name.
#+end_src
** dbDelMultiple query options
#+begin_src
The query should be an sdict with the following options:
 * userID - only deletes entries with the dbEntry field .UserID provided, defaults to deleting entries with any ID.
 * pattern - only deletes entry keys with a name matching the pattern given.
 * reverse - if true, starts deleting entries with the lowest values first;
   otherwise starts deleting entries with the highest values first. Default is false.
#+end_src
** dbRank query options
#+begin_src
The query specifies the set of entries that should be considered, and should be a sdict with the following options:
 * userID - only includes entries with that user ID, defaults to including entries with any user ID
 * pattern - only includes database's key entries with names matching the pattern given,
   defaults to counting entries with any name
 * reverse - if true, entries with lower value have higher rank;
   otherwise entries with higher value have higher rank. Default is false.
#+end_src
** Note about saving numbers into database
As stated above, database stores numbers as type /float64/. If you save a large number into database like an /int64/ (which IDs are), the value will be truncated. To avoid this behavior, you convert the number to type /string/ before saving and convert it back to its original type when retrieving it. Example: ~{{$v := .User.ID}} {{dbSet 0 "userid" (str $v)}} {{$fromDB := toInt (dbGet 0 "user_id").Value}}~
~dict~ key values are also retrieved as /int64/, so to use them for indexing one has to e.g. index $x (toInt64 0)
[[#table-of-contents][back to TOC]]

* ExecCC
All ~execCC~ calls are limited to 1 / CC for non-premium users and 10 / CC for premium users.

||
| Function                                      | Description|
|-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~cancelSheduledUniqueCC~ ccID key             | Cancels a previously scheduled custom command execution using ~scheduleUniqueCC~|
| ~execCC~ ccID channel delay data              | Function that executes another custom command specified by ~ccID~. With ~delay~ 0 the max recursion depth is 2 (using ~.StackDepth~ shows the current depth). ~execCC~ is rate-limited strictly at *max 10 delayed custom commands executed per channel per minute*, if you go over that it will be simply thrown away. Argument ~channel~ can be nil, channel's ID or name. The ~delay~ argument is execution delay of another CC in seconds. The ~data~ argument is a content that you pass to the other executed custom command. To retrieve that ~data~, you use ~.ExecData~. This example is important > [[https://docs.yagpdb.xyz/reference/custom-command-examples#countdown-example-exec-cc][execCC example]] also next snippet which shows you same thing run using the same custom command > Snippets. |
| ~sheduleUniqueCC~ ccID channel delay key data | Same as ~execCC~ except there can only be 1 scheduled cc execution per server per key, if key already exists then it is overwritten with the new data and delay (as above, in seconds). An example would be a mute command that schedules the unmute action sometime in the future. However, let's say you use the unmute command again on the same user, you would want to override the last scheduled unmute to the new one. This can be used for that                                                                                                                                                                                                                                                                |
** ExecCC section's snippets
To demonstrate execCC and .ExecData using the same CC.
#+BEGIN_SRC go
{{ $yag := "YAGPDB rules! " }}
{{ $ctr := 0 }} {{ $yourCCID := .CCID }}
{{ if .ExecData }}
    {{ $ctr = add .ExecData.number 1 }}
    {{ $yag = joinStr "" $yag $ctr }} {{ .ExecData.YAGPDB }}
{{ else }}
    So, someone rules.
    {{ $ctr = add $ctr 1 }} {{ $yag = joinStr "" $yag 1 }}
{{ end }}
{{ if lt $ctr 5 }}
    {{ execCC $yourCCID nil 10 (sdict "YAGPDB" $yag "number" $ctr) }}
{{ else }} FUN'S OVER! {{ end }}
#+END_SRC
[[#table-of-contents][back to TOC]]

* Math
|--------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| Function                       | Description                                                                                                                                                                                                                                                                                                                     | PAGST      |
|--------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| ~abs~                          | Returns absolute value of the argument as type /float64/.                                                                                                                                                                                                                                                                       | \checkmark |
| ~add~ x y z ...                | Returns x + y + z + ...,  detects first number's type - is it /int/ or /float/ and based on that adds. (use ~toFloat~ on the first argument to force floating point math.)~{{add 5 4 3 2 -1}}~ sums all these numbers and returns ~13~.                                                                                         |            |
| ~bitwiseAnd~                   | The output of bitwise AND is 1 if the corresponding bits of two operands is 1. If either bit of an operand is 0, the result of corresponding bit is evaluated to 0. Example: ~{{bitwiseAnd 12 25}}~ returns ~8~, that in binary 00001100 AND 00011001 is 00001000.                                                              | \checkmark |
| ~bitwiseAndNot~                | Has an alias of ~bitwiseClear~. This function is called bit clear because of AND NOT. For example in the expression z = x AND NOT y, each bit of z is 0 if the corresponding bit of y is 1; otherwise it equals to the corresponding bit of x. ~{{bitwiseClear 7 12}}~ returns ~3~, that is 0111 AND NOT 1100 is 11.            | \checkmark |
| ~bitwiseNot~                   | The bitwise NOT operator inverts the bits of the argument. Example: ~{{bitwiseNot 7}}~ returns ~-8~. that in binary 0111 to 1000                                                                                                                                                                                                | \checkmark |
| ~bitwiseOr~ x y z ...          | The output of bitwise OR is 1 if at least one corresponding bit of two operands is 1. Example: ~{{bitwiseOr 12 25}}~ returns ~29~, that in binary 00001100 OR 00011001 is 00011101.                                                                                                                                             | \checkmark |
| ~bitwiseXor~                   | The result of bitwise XOR operator is 1 if the corresponding bits of two operands are opposite. Example: ~{{bitwiseXor 12 25}}~ returns ~21~, that in binary 00001100 OR 00011001 is 00010101.                                                                                                                                  | \checkmark |
| ~bitwiseLeftShitf~             | Has an alias of ~shiftLeft~. Left shift operator shifts all bits towards left by a certain number of specified bits. The bit positions that have been vacated by the left shift operator are filled with 0. Example: ~{{range seq 0 3}} {{shiftLeft 212 .}} {{end}}~ returns ~212 424 848~                                      | \checkmark |
| ~bitwiseRightShift~            | Has an alias of ~shiftLeft~. Right shift operator shifts all bits towards right by certain number of specified bits. Example: ~{{range seq 0 3}} {{shiftRight 212 .}} {{end}}~ returns ~212 106 53~.                                                                                                                            | \checkmark |
| ~cbrt~                         | Returns the cube root of given argument in type /float64/ e.g. ~{{cbrt 64}}~ returns ~4~.                                                                                                                                                                                                                                       |            |
| ~cos~                          | Returns the cosine of the given radian argument as type /float64/.                                                                                                                                                                                                                                                              | \checkmark |
| ~div~ x y z ...                | Division, like ~add~ or ~mult~, function detects first number's type first. ~{{div 11 3}}~ returns ~3~ whereas ~{{div 11.1 3}}~ returns  ~3.6999999999999997~.                                                                                                                                                                  |            |
| ~exp~                          | Return e**x, the base-e componential of given argument as type /float64/.                                                                                                                                                                                                                                                       | \checkmark |
| ~exp2~                         | Returns 2**x, the base-2 exponential of given argument as type /float64/.                                                                                                                                                                                                                                                       | \checkmark |
| ~fdiv~ x y z ...               | Meant specifically for floating point numbers division.                                                                                                                                                                                                                                                                         |            |
| ~log~ x base                   | Log is a logarithm function using (log base of x). Arguments can be any type of numbers, as long as they follow logarithm logic. Return value is of type /float64/. If ~base~ argument is not given it is using natural logarithm (base e - The Euler's constant) as default. ~{{log "123" 2}}~ will return ~6.94251450533924~. |            |
| ~max~ x y                      | Returns the larger of x or y as type /float64/.                                                                                                                                                                                                                                                                                 | \checkmark |
| ~min~ x y                      | Returns the smaller of x or y as type /float64/.                                                                                                                                                                                                                                                                                | \checkmark |
| ~mod~ x y                      | Mod (modulo) returns the floating-point remainder of x/y. ~{{mod 17 3}}~ returns ~2~ of type /float64/.                                                                                                                                                                                                                         |            |
| ~mult~ x y z ...               | Multiplication, like ~add~ or ~div~, detects first number's type. ~{{mult 3.14 2}}~ returns ~6.28~                                                                                                                                                                                                                              |            |
| ~pow~ x y                      | Pow returns x**y, the base-x exponential of y which have to be both numbers. Type is returned as /float64/. ~{{pow 2 3}}~ returns ~8~.                                                                                                                                                                                          |            |
| ~randFloat~ (stop, start stop) | Returns a random /float64/ between 0 and stop, or start - stop if two args are provided. Result will be ~start <= random number < stop~                                                                                                                                                                                         | \checkmark |
| ~randInt~ (stop, start stop)   | Returns a random integer between 0 and stop, or start - stop if two args are provided. Result will be ~start <= random number < stop~.                                                                                                                                                                                          |            |
| ~round~                        | Returns the nearest integer, rounding half away from zero. Regular rounding > ~10.4~ is ~10~ and ~10.5~ is ~11~. All round functions return type /float64/, so use conversion functions to get integers. For more complex rounding, example in [[#math-sections-snippets][section's snippets]].                                                              |            |
| ~roundCeil~                    | Returns the least integer value greater than or equal to input or rounds up.  ~{{roundCeil 1.1}}~ returns ~2~.                                                                                                                                                                                                                  |            |
| ~rounEven~                     | Returns the nearest integer, rounding ties to even. ~{{roundEven 10.5}}~ returns ~10~, ~{{roundEven 11.5}}~ returns ~12~.                                                                                                                                                                                                       |            |
| ~roundFloor~                   | Returns the greatest integer value less than or equal to input or rounds down. ~{{roundFloor 1.9}}~ returns ~1~.                                                                                                                                                                                                                |            |
| ~sin~                          | Returns the sine of the given radian argument as type /float64/.                                                                                                                                                                                                                                                                | \checkmark |
| ~sqrt~                         | Returns the square root of a number as type /float64/. ~{{sqrt 49}}~ returns ~7~, ~{{printf "%.4f" (sqrt 12.34)}}~ returns ~3.5128~.                                                                                                                                                                                            |            |
| ~sub~ x y z ...                | Returns x - y -z - ... Works like add, just subtracts.                                                                                                                                                                                                                                                                          |            |
| ~tan~                          | Returns the tangent of the given radian argument as type /float64/.                                                                                                                                                                                                                                                             | \checkmark |

** Math section's snippets
:PROPERTIES:
:CUSTOM_ID: math-sections-snippets
:END:
#+begin_src go
To demonstrate rounding float to 2 decimal places.
{{div (round (mult 12.3456 100)) 100}} returns 12.35
{{div (roundFloor (mult  12.3456 100)) 100}} returns 12.34
#+end_src
** Notice on bitwise functions
The bitwise logical and shift operators apply to integers only of which both can be signed and unsigned. The right-hand side of a shift operator, however, must be an unsigned integer.\\
Shift operators implement arithmetic shifts if the left operand is a signed integer and logical shifts if it is an unsigned integer.

[[#table-of-contents][back to TOC]]
